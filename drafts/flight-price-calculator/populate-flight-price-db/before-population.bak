package main

import (
	"database/sql"
	"fmt"
	"log"
	"path/filepath"

	_ "github.com/mattn/go-sqlite3"
)

func main() {
	// Open the raw flights database.
	rawDBPath := filepath.Join("../../../data/raw/flights", "flights.db")
	rawDB, err := sql.Open("sqlite3", rawDBPath)
	if err != nil {
		log.Fatalf("Failed to open raw flights database: %v", err)
	}
	defer rawDB.Close()

	// Open the generated flight-prices database.
	fpDBPath := filepath.Join("../../../data/generated", "flight-prices.db")
	fpDB, err := sql.Open("sqlite3", fpDBPath)
	if err != nil {
		log.Fatalf("Failed to open flight-prices database: %v", err)
	}
	defer fpDB.Close()

	// Open the flight price modifiers database.
	modDBPath := filepath.Join("../../../data/generated", "flight_price_modifiers.db")
	modDB, err := sql.Open("sqlite3", modDBPath)
	if err != nil {
		log.Fatalf("Failed to open flight_price_modifiers database: %v", err)
	}
	defer modDB.Close()

	// Query all unique routes from the schedule table.
	uniqueRoutesQuery := `
		SELECT DISTINCT departureAirport, arrivalAirport
		FROM schedule
		ORDER BY departureAirport, arrivalAirport;
	`
	rows, err := rawDB.Query(uniqueRoutesQuery)
	if err != nil {
		log.Fatalf("Failed to query unique routes: %v", err)
	}
	defer rows.Close()

	// Prepare an INSERT statement for the routes table.
	// Added most_common_aircraft_seating_capacity column.
	insertStmt, err := fpDB.Prepare(`
		INSERT INTO routes (
			origin_iata, destination_iata, route_frequency, 
			most_common_airline, most_common_aircraft, 
			most_common_aircraft_seating_capacity
		) VALUES (?, ?, ?, ?, ?, ?);
	`)
	if err != nil {
		log.Fatalf("Failed to prepare insert statement: %v", err)
	}
	defer insertStmt.Close()

	// Process each unique route.
	for rows.Next() {
		var departureAirport, arrivalAirport string
		if err := rows.Scan(&departureAirport, &arrivalAirport); err != nil {
			log.Printf("Failed to scan route: %v", err)
			continue
		}

		// 1. Compute route frequency.
		var routeFrequency int
		err = rawDB.QueryRow(
			`SELECT COUNT(*) FROM schedule WHERE departureAirport = ? AND arrivalAirport = ?;`,
			departureAirport, arrivalAirport,
		).Scan(&routeFrequency)
		if err != nil {
			log.Printf("Failed to count flights for route %s -> %s: %v", departureAirport, arrivalAirport, err)
			continue
		}

		// 2. Determine the most common airline.
		var mostCommonAirline string
		err = rawDB.QueryRow(
			`SELECT airline_name FROM schedule 
			 WHERE departureAirport = ? AND arrivalAirport = ? AND airline_name IS NOT NULL
			 GROUP BY airline_name
			 ORDER BY COUNT(*) DESC LIMIT 1;`,
			departureAirport, arrivalAirport,
		).Scan(&mostCommonAirline)
		if err != nil && err != sql.ErrNoRows {
			log.Printf("Failed to get most common airline for route %s -> %s: %v", departureAirport, arrivalAirport, err)
			continue
		}

		// 3. Determine the most common aircraft.
		var mostCommonAircraft string
		err = rawDB.QueryRow(
			`SELECT aircraft_model FROM schedule 
			 WHERE departureAirport = ? AND arrivalAirport = ? AND aircraft_model IS NOT NULL
			 GROUP BY aircraft_model
			 ORDER BY COUNT(*) DESC LIMIT 1;`,
			departureAirport, arrivalAirport,
		).Scan(&mostCommonAircraft)
		if err != nil && err != sql.ErrNoRows {
			log.Printf("Failed to get most common aircraft for route %s -> %s: %v", departureAirport, arrivalAirport, err)
			continue
		}

		// 4. Look up seating capacity for the most common aircraft from the modifiers database.
		var seatingCapacity int
		err = modDB.QueryRow(
			`SELECT seating_capacity FROM aircraft_capacity_lookup 
			 WHERE aircraft_model = ? LIMIT 1;`,
			mostCommonAircraft,
		).Scan(&seatingCapacity)
		if err != nil {
			if err == sql.ErrNoRows {
				log.Printf("No seating capacity found for aircraft %s on route %s -> %s", mostCommonAircraft, departureAirport, arrivalAirport)
				seatingCapacity = 0
			} else {
				log.Printf("Failed to get seating capacity for aircraft %s: %v", mostCommonAircraft, err)
				seatingCapacity = 0
			}
		}

		// Insert the aggregated data into the routes table.
		_, err = insertStmt.Exec(
			departureAirport,   // origin_iata
			arrivalAirport,     // destination_iata
			routeFrequency,     // route_frequency
			mostCommonAirline,  // most_common_airline
			mostCommonAircraft, // most_common_aircraft
			seatingCapacity,    // most_common_aircraft_seating_capacity
		)
		if err != nil {
			log.Printf("Failed to insert route %s -> %s: %v", departureAirport, arrivalAirport, err)
			continue
		}

		log.Printf("Inserted route %s -> %s: frequency=%d, aircraft=%s, seating_capacity=%d",
			departureAirport, arrivalAirport, routeFrequency, mostCommonAircraft, seatingCapacity)
	}

	if err := rows.Err(); err != nil {
		log.Fatalf("Error reading unique routes: %v", err)
	}

	fmt.Println("Successfully processed and inserted unique routes into flight-prices.db")
}
